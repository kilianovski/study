// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with increment, load, and reset modes.
 * if      (inc(t))   out(t+1) = out(t) + 1
 * else if (load(t))  out(t+1) = in(t)
 * else if (reset(t)) out(t+1) = 0
 * else               out(t+1) = out(t)
 *
 * To select a mode, assert the relevant control bit,
 * and de-assert the other two bits. 
 */

/**
* A 16-bit counter.
    * if reset(t): out(t+1) = 0
    * else if load(t): out(t+1) = in(t)
    * else if inc(t): out(t+1) = out(t) + 1
    * else out(t+1) = out(t)
*/

CHIP PC {
    IN in[16],inc, load, reset;
    OUT out[16];
    
    PARTS:
    //// Replace this comment with your code.

    Or(a=reset, b=load, out=regLoad0);
    Or(a=regLoad0, b=inc, out=regLoad);

    Inc16(in=prevOut, out=prevOutPlusOne);

    // regIn = (0 if reset) (in if load) (out(t) + 1 if inc)

    // Not16(in=reset, out=notReset);
    // And(a=notReset, b=load, out=isLoad);
    
    // Not16(in=isLoad, out=notIsLoad);

    // And(a=notIsLoad, b=inc, out=isInc);

    
    // regIn = (0 if reset) (in if load) (out(t) + 1 if inc)
    
    // prevOut <-- sel == 00
    // 0 <-- sel == 01
    // in <-- sel == 10
    // prevOutPlusOne <-- sel == 11


    Mux16(a=prevOut, b=prevOutPlusOne, sel=inc, out=regIn1);
    Mux16(a=regIn1, b=in, sel=load, out=regIn0);
    Mux16(a=regIn0, b=false, sel=reset, out=regIn);

/**
 * A 16-bit counter with increment, load, and reset modes.
 * if      (inc(t))   out(t+1) = out(t) + 1
 * else if (load(t))  out(t+1) = in(t)
 * else if (reset(t)) out(t+1) = 0
 * else               out(t+1) = out(t)
 *
 * To select a mode, assert the relevant control bit,
 * and de-assert the other two bits. 
 */

    // Mux16(a=prevOut, b=false, sel=reset, out=regIn1);
    // Mux16(a=regIn1, b=in, sel=load, out=regIn0);
    // Mux16(a=regIn0, b=prevOutPlusOne, sel=inc, out=regIn);


    Register(in=regIn, load=regLoad, out=prevOut, out=out);
}
